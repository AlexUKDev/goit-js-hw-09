{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAIA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,aAC7BC,WAAYF,SAASC,cAAc,uBACnCE,UAAWH,SAASC,cAAc,sBAClCG,YAAaJ,SAASC,cAAc,wBACpCI,UAAWL,SAASC,cAAc,0BA+CpC,SAASK,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAACH,E,MAAUC,IAGnBG,EAAO,C,SAACJ,E,MAAUC,MAEnBA,MAvDPV,EAAKC,KAAKiB,iBAAiB,UAa3B,SAAsBC,GACpBA,EAAIC,iBAGJ,IAAIC,GAAmBrB,EAAKI,WAAWkB,MACnCC,GAAkBvB,EAAKK,UAAUiB,MACjCE,GAAexB,EAAKM,YAAYgB,MAEpCG,QAAQC,IAAIL,GACZI,QAAQC,IAAIH,GACZE,QAAQC,IAAIF,GAEZ,IAAK,IAAIG,EAAI,EAAGA,GAAKH,EAAaG,GAAK,EAErCnB,EAAcmB,EAAGN,GACdO,MAAK,EAACnB,SAAEA,EAAQC,MAAEA,MACnBmB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAqBtB,QAAiBC,UAG7DsB,OAAM,EAACvB,SAAEA,EAAQC,MAAEA,MACpBmB,EAAA/B,GAASgC,OAAOG,QAAQ,sBAAoBxB,QAAiBC,UAI/DW,GAAmBE,EAGrBvB,EAAKC,KAAKiC","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\n// Notiflix.Notify.warning('Please choose a date in the future');\n\nconst refs = {\n  form: document.querySelector('form.form'),\n  delayInput: document.querySelector('input[name=\"delay\"]'),\n  stepInput: document.querySelector('input[name=\"step\"]'),\n  amountInput: document.querySelector('input[name=\"amount\"]'),\n  btnSubmit: document.querySelector('button[type=\"submit\"]')\n}\n\nrefs.form.addEventListener('submit', onFormSubmit);\n\n\n//     Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) \n// стільки разів, скільки ввели в поле amount.Під час кожного виклику передай їй номер промісу(position),\n// що створюється, і затримку, враховуючи першу затримку(delay), введену користувачем, і крок(step).\n\n// function onFormInput() {\n//   console.log(+refs.delayInput.value);\n//   console.log(refs.stepInput.value);\n//   console.log(refs.amountInput.value);\n// }\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault()\n\n  // inputs value transform to number\n  let firstDelayToNum = +refs.delayInput.value;\n  let stepDelayToNum = +refs.stepInput.value;\n  let amountToNum = +refs.amountInput.value;\n\n  console.log(firstDelayToNum);\n  console.log(stepDelayToNum);\n  console.log(amountToNum);\n\n  for (let i = 1; i <= amountToNum; i += 1) {\n\n    createPromise(i, firstDelayToNum)\n      .then(({ position, delay }) => {\n      Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    })\n      .catch(({ position, delay }) => {\n      Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n    });\n\n    firstDelayToNum += stepDelayToNum;\n  }\n\n  refs.form.reset()\n}\n\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay})\n      }\n      else {\n        reject({position, delay})\n      }\n    }, delay)\n  })\n  \n}\n\n\n\n\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delayInput","stepInput","amountInput","btnSubmit","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","evt","preventDefault","firstDelayToNum","value","stepDelayToNum","amountToNum","console","log","i","then","$parcel$interopDefault","Notify","success","catch","failure","reset"],"version":3,"file":"03-promises.7f73c4d2.js.map"}